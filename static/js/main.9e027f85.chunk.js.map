{"version":3,"sources":["BarChart.jsx","GithubAxios.jsx","App.js","serviceWorker.js","index.js"],"names":["BarChart","props","committers","cData","Array","from","style","display","alignItems","justifyContent","id","data","svgCanvas","d3","append","attr","selectAll","enter","datapoint","iteration","dataPoint","i","text","drawBarChart","GithubAxios","useState","commits","setCommits","a","numer_of_pages","page","total","url","console","log","axios","get","then","res","concat","catch","err","useEffect","asyncFunc","Map","author","commit","name","has","set","keys","children","k","entry","value","push","className","textAlign","scope","map","key","tableLayout","width","c","date","message","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"kSA2DeA,EAxDE,SAACC,GAAW,IACnBC,EAAeD,EAAfC,WAEFC,EAAQC,MAAMC,KAAKH,GAqCzB,OACE,yBACEI,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,eAAgB,WAGlB,yBAAKC,GAAG,WAzCS,SAACC,GACpB,IAIMC,EAAYC,IACR,WACPC,OAAO,OACPC,KAAK,QANY,KAOjBA,KAAK,SARa,KASlBT,MAAM,SAAU,mBAEnBM,EACGI,UAAU,QACVL,KAAKA,GACLM,QACAH,OAAO,QACPC,KAAK,QAAS,IACdA,KAAK,UAAU,SAACG,GAAD,OAfJ,EAemBA,EAAU,MACxCH,KAAK,OAAQ,UACbA,KAAK,KAAK,SAACG,EAAWC,GAAZ,OAAsC,GAAZA,KACpCJ,KAAK,KAAK,SAACG,GAAD,OApBQ,IAEP,EAkB6BA,EAAU,MAErDN,EACGI,UAAU,QACVL,KAAKA,GACLM,QACAH,OAAO,QACPC,KAAK,KAAK,SAACK,EAAWC,GAAZ,OAAsB,GAAJA,EAAS,MACrCN,KAAK,KAAK,SAACK,EAAWC,GAAZ,OA5BQ,IAEP,EA0BgCD,EAAU,GAAa,MAClEE,MAAK,SAACF,GAAD,OAAeA,EAAU,MAc7BG,CAAapB,KCuENqB,EAxHK,WAAO,IAAD,EACMC,mBAAS,IADf,mBACjBC,EADiB,KACRC,EADQ,iDAOxB,kCAAAC,EAAA,sDAEQC,EAAiB,EACnBC,EAAO,EACPC,EAAQ,GAJd,YAKSD,EAAOD,EAAiB,GALjC,wBAMUG,EANV,uCAHc,UAGd,YAFa,UAEb,yBAM8EF,GAC1EG,QAAQC,IAAIF,GAPhB,SAQUG,IACHC,IAAIJ,GACJK,MAAK,SAACC,GACLL,QAAQC,IAAI,OAAQI,EAAI3B,MACxBoB,EAAQA,EAAMQ,OAAOD,EAAI3B,SAE1B6B,OAAM,SAACC,GACNR,QAAQC,IAAIO,MAfpB,OAiBIX,IAjBJ,uBAmBEH,EAAWI,GAnBb,6CAPwB,sBA6BxBW,qBAAU,YA7Bc,mCA8BtBC,KACC,IAGH,IAlCwB,EAkClBzC,EAAa,IAAI0C,IAlCC,cAmCVlB,GAnCU,IAmCxB,2BAAuB,CAAC,IAClBmB,EADiB,QACNC,OAAOD,OAAOE,KACzB7C,EAAW8C,IAAIH,GACjB3C,EAAW+C,IAAIJ,EAAQ3C,EAAWkC,IAAIS,GAAU,GAEhD3C,EAAW+C,IAAIJ,EAAQ,IAxCH,8BAkDxB,IALA,IAAMK,EAAO9C,MAAMC,KAAKH,EAAWgD,QAC7BvC,EAAO,CACXoC,KAAM,WACNI,SAAU,IAEZ,MAAcD,EAAd,eAAoB,CAAf,IAAIE,EAAC,KACJC,EAAQ,CACVN,KAAMK,EACNE,MAAOpD,EAAWkC,IAAIgB,IAExBzC,EAAKwC,SAASI,KAAKF,GAGrB,OACE,yBAAKG,UAAU,aACb,wBAAIlD,MAAO,CAAEmD,UAAW,WAAxB,UAxDU,WAyDV,wBAAInD,MAAO,CAAEmD,UAAW,WAAxB,eAxDS,WAyDT,2BAAOD,UAAU,oBACf,+BACE,4BACE,wBAAIE,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,aAGJ,+BAGIR,EAAKS,KAAI,SAACP,GACR,OACE,wBAAIQ,IAAKR,GACP,4BAAKA,GACL,4BAAKlD,EAAWkC,IAAIgB,UAOhC,6BACA,wBAAI9C,MAAO,CAAEmD,UAAW,WAAxB,wCAGA,kBAAC,EAAD,CAAUvD,WAAYA,IACtB,6BACA,wBAAII,MAAO,CAAEmD,UAAW,WAAxB,WACA,2BACED,UAAU,mBACVlD,MAAO,CAAEuD,YAAa,QAASC,MAAO,SAEtC,+BACE,4BACE,wBAAIJ,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,aAGJ,+BACGhC,EAAQiC,KAAI,SAACI,GACZ,IAAIlB,EAASkB,EAAEjB,OAAOD,OAAOE,KACzBiB,EAAOD,EAAEjB,OAAOD,OAAOmB,KACvBC,EAAUF,EAAEjB,OAAOmB,QACvB,OACE,wBAAIL,IAAKI,GACP,4BAAKnB,GACL,4BAAKmB,GACL,4BAAKC,WCxGNC,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCMcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdzC,OAAM,SAAA0C,GACLjD,QAAQiD,MAAMA,EAAMjB,c","file":"static/js/main.9e027f85.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as d3 from \"d3\"; //https://www.freecodecamp.org/news/how-to-get-started-with-d3-and-react-c7da74a5bd9f/#:~:text=You%20need%20to%20use%20import,has%20no%20default%20exported%20module.\n\nconst BarChart = (props) => {\n  const { committers } = props;\n\n  const cData = Array.from(committers);\n\n  // const testData = [ 2, 1, 5, 3, 4 ];\n\n  const drawBarChart = (data) => {\n    const canvasHeight = 400;\n    const canvasWidth = 600;\n    const scale = 5;\n\n    const svgCanvas = d3\n      .select(\"#canvas\")\n      .append(\"svg\")\n      .attr(\"width\", canvasWidth)\n      .attr(\"height\", canvasHeight)\n      .style(\"border\", \"1px solid black\");\n\n    svgCanvas\n      .selectAll(\"rect\")\n      .data(data)\n      .enter()\n      .append(\"rect\")\n      .attr(\"width\", 40)\n      .attr(\"height\", (datapoint) => datapoint[1] * scale)\n      .attr(\"fill\", \"orange\")\n      .attr(\"x\", (datapoint, iteration) => iteration * 45)\n      .attr(\"y\", (datapoint) => canvasHeight - datapoint[1] * scale);\n\n    svgCanvas\n      .selectAll(\"text\")\n      .data(data)\n      .enter()\n      .append(\"text\")\n      .attr(\"x\", (dataPoint, i) => i * 45 + 15)\n      .attr(\"y\", (dataPoint, i) => canvasHeight - dataPoint[1] * scale - 10)\n      .text((dataPoint) => dataPoint[1]);\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <div id=\"canvas\"></div>\n      {\n        // drawBarChart(testData)\n        drawBarChart(cData)\n      }\n    </div>\n  );\n};\nexport default BarChart;\n","import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\nimport BarChart from \"./BarChart\";\n\nconst GithubAxios = () => {\n  const [commits, setCommits] = useState([]);\n\n  // can use these variable to change owner and repository\n  const owner = \"bitcoin\";\n  const repo = \"bitcoin\";\n\n  async function asyncFunc() {\n    // can use this variable to fetch more commits\n    const numer_of_pages = 1;\n    let page = 1;\n    let total = [];\n    while (page < numer_of_pages + 1) {\n      const url = `https://api.github.com/repos/${owner}/${repo}/commits?page=${page}`;\n      console.log(url);\n      await axios\n        .get(url)\n        .then((res) => {\n          console.log(\"data\", res.data);\n          total = total.concat(res.data);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n      page++;\n    }\n    setCommits(total);\n  }\n\n  useEffect(() => {\n    asyncFunc();\n  }, []);\n\n  // counts the number of commits per author\n  const committers = new Map();\n  for (var c of commits) {\n    let author = c.commit.author.name;\n    if (committers.has(author)) {\n      committers.set(author, committers.get(author) + 1);\n    } else {\n      committers.set(author, 1);\n    }\n  }\n\n  // formats data for D3 bar graph\n  const keys = Array.from(committers.keys());\n  const data = {\n    name: \"all_data\",\n    children: [],\n  };\n  for (var k of keys) {\n    let entry = {\n      name: k,\n      value: committers.get(k),\n    };\n    data.children.push(entry);\n  }\n\n  return (\n    <div className=\"container\">\n      <h2 style={{ textAlign: \"center\" }}>Owner: {owner}</h2>\n      <h2 style={{ textAlign: \"center\" }}>Repository: {repo}</h2>\n      <table className=\"table table-dark\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Developer</th>\n            <th scope=\"col\">Commits</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            // https://stackoverflow.com/questions/43885365/using-map-on-an-iterator\n            keys.map((k) => {\n              return (\n                <tr key={k}>\n                  <td>{k}</td>\n                  <td>{committers.get(k)}</td>\n                </tr>\n              );\n            })\n          }\n        </tbody>\n      </table>\n      <hr />\n      <h3 style={{ textAlign: \"center\" }}>\n        Bar Chart showing commits per person\n      </h3>\n      <BarChart committers={committers} />\n      <hr />\n      <h3 style={{ textAlign: \"center\" }}>Commits</h3>\n      <table\n        className=\"table table-dark\"\n        style={{ tableLayout: \"fixed\", width: \"100%\" }}\n      >\n        <thead>\n          <tr>\n            <th scope=\"col\">Developer</th>\n            <th scope=\"col\">Date</th>\n            <th scope=\"col\">Message</th>\n          </tr>\n        </thead>\n        <tbody>\n          {commits.map((c) => {\n            let author = c.commit.author.name;\n            let date = c.commit.author.date;\n            let message = c.commit.message;\n            return (\n              <tr key={date}>\n                <td>{author}</td>\n                <td>{date}</td>\n                <td>{message}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default GithubAxios;\n","import React from 'react';\nimport GithubAxios from './GithubAxios';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GithubAxios />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}